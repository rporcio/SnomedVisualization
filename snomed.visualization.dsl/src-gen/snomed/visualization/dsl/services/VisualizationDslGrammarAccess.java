/*
* generated by Xtext
*/
package snomed.visualization.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VisualizationDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsaRelationshipsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIsaRelationshipsIsaRelationshipsParserRuleCall_0_0 = (RuleCall)cIsaRelationshipsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cUngroupedRelationshipsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUngroupedRelationshipsRelationshipsParserRuleCall_1_1_0 = (RuleCall)cUngroupedRelationshipsAssignment_1_1.eContents().get(0);
		private final Assignment cGroupedRelationshipsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cGroupedRelationshipsRelationshipGroupParserRuleCall_1_2_0 = (RuleCall)cGroupedRelationshipsAssignment_1_2.eContents().get(0);
		
		//Expression hidden(WS, SL_COMMENT, ML_COMMENT):
		//
		//	isaRelationships=IsaRelationships (COLON ungroupedRelationships=Relationships*
		//
		//	groupedRelationships+=RelationshipGroup*)?;
		public ParserRule getRule() { return rule; }

		//isaRelationships=IsaRelationships (COLON ungroupedRelationships=Relationships*
		//
		//groupedRelationships+=RelationshipGroup*)?
		public Group getGroup() { return cGroup; }

		//isaRelationships=IsaRelationships
		public Assignment getIsaRelationshipsAssignment_0() { return cIsaRelationshipsAssignment_0; }

		//IsaRelationships
		public RuleCall getIsaRelationshipsIsaRelationshipsParserRuleCall_0_0() { return cIsaRelationshipsIsaRelationshipsParserRuleCall_0_0; }

		//(COLON ungroupedRelationships=Relationships* groupedRelationships+=RelationshipGroup*)?
		public Group getGroup_1() { return cGroup_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_0() { return cCOLONTerminalRuleCall_1_0; }

		//ungroupedRelationships=Relationships*
		public Assignment getUngroupedRelationshipsAssignment_1_1() { return cUngroupedRelationshipsAssignment_1_1; }

		//Relationships
		public RuleCall getUngroupedRelationshipsRelationshipsParserRuleCall_1_1_0() { return cUngroupedRelationshipsRelationshipsParserRuleCall_1_1_0; }

		//groupedRelationships+=RelationshipGroup*
		public Assignment getGroupedRelationshipsAssignment_1_2() { return cGroupedRelationshipsAssignment_1_2; }

		//RelationshipGroup
		public RuleCall getGroupedRelationshipsRelationshipGroupParserRuleCall_1_2_0() { return cGroupedRelationshipsRelationshipGroupParserRuleCall_1_2_0; }
	}

	public class IsaRelationshipsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsaRelationships");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationshipsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationshipsConceptParserRuleCall_0_0 = (RuleCall)cRelationshipsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPLUS_SIGNTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRelationshipsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelationshipsConceptParserRuleCall_1_1_0 = (RuleCall)cRelationshipsAssignment_1_1.eContents().get(0);
		
		//IsaRelationships:
		//
		//	relationships+=Concept (PLUS_SIGN relationships+=Concept)*;
		public ParserRule getRule() { return rule; }

		//relationships+=Concept (PLUS_SIGN relationships+=Concept)*
		public Group getGroup() { return cGroup; }

		//relationships+=Concept
		public Assignment getRelationshipsAssignment_0() { return cRelationshipsAssignment_0; }

		//Concept
		public RuleCall getRelationshipsConceptParserRuleCall_0_0() { return cRelationshipsConceptParserRuleCall_0_0; }

		//(PLUS_SIGN relationships+=Concept)*
		public Group getGroup_1() { return cGroup_1; }

		//PLUS_SIGN
		public RuleCall getPLUS_SIGNTerminalRuleCall_1_0() { return cPLUS_SIGNTerminalRuleCall_1_0; }

		//relationships+=Concept
		public Assignment getRelationshipsAssignment_1_1() { return cRelationshipsAssignment_1_1; }

		//Concept
		public RuleCall getRelationshipsConceptParserRuleCall_1_1_0() { return cRelationshipsConceptParserRuleCall_1_1_0; }
	}

	public class RelationshipGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENING_CURLY_BRACKETTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cRelationshipsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_1_0 = (RuleCall)cRelationshipsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cRelationshipsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_2_1_0 = (RuleCall)cRelationshipsAssignment_2_1.eContents().get(0);
		private final RuleCall cCLOSING_CURLY_BRACKETTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//RelationshipGroup:
		//
		//	OPENING_CURLY_BRACKET relationships+=Relationship (COMMA relationships+=Relationship)* CLOSING_CURLY_BRACKET;
		public ParserRule getRule() { return rule; }

		//OPENING_CURLY_BRACKET relationships+=Relationship (COMMA relationships+=Relationship)* CLOSING_CURLY_BRACKET
		public Group getGroup() { return cGroup; }

		//OPENING_CURLY_BRACKET
		public RuleCall getOPENING_CURLY_BRACKETTerminalRuleCall_0() { return cOPENING_CURLY_BRACKETTerminalRuleCall_0; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_1() { return cRelationshipsAssignment_1; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_1_0() { return cRelationshipsRelationshipParserRuleCall_1_0; }

		//(COMMA relationships+=Relationship)*
		public Group getGroup_2() { return cGroup_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_2_1() { return cRelationshipsAssignment_2_1; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_2_1_0() { return cRelationshipsRelationshipParserRuleCall_2_1_0; }

		//CLOSING_CURLY_BRACKET
		public RuleCall getCLOSING_CURLY_BRACKETTerminalRuleCall_3() { return cCLOSING_CURLY_BRACKETTerminalRuleCall_3; }
	}

	public class RelationshipsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationships");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationshipsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_0_0 = (RuleCall)cRelationshipsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRelationshipsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_1_1_0 = (RuleCall)cRelationshipsAssignment_1_1.eContents().get(0);
		
		//Relationships:
		//
		//	relationships+=Relationship (COMMA relationships+=Relationship)*;
		public ParserRule getRule() { return rule; }

		//relationships+=Relationship (COMMA relationships+=Relationship)*
		public Group getGroup() { return cGroup; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_0() { return cRelationshipsAssignment_0; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_0_0() { return cRelationshipsRelationshipParserRuleCall_0_0; }

		//(COMMA relationships+=Relationship)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_1_1() { return cRelationshipsAssignment_1_1; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_1_1_0() { return cRelationshipsRelationshipParserRuleCall_1_1_0; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeConceptParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cEQUAL_SIGNTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDestinationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestinationConceptParserRuleCall_2_0 = (RuleCall)cDestinationAssignment_2.eContents().get(0);
		
		//Relationship:
		//
		//	type=Concept EQUAL_SIGN destination=Concept;
		public ParserRule getRule() { return rule; }

		//type=Concept EQUAL_SIGN destination=Concept
		public Group getGroup() { return cGroup; }

		//type=Concept
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Concept
		public RuleCall getTypeConceptParserRuleCall_0_0() { return cTypeConceptParserRuleCall_0_0; }

		//EQUAL_SIGN
		public RuleCall getEQUAL_SIGNTerminalRuleCall_1() { return cEQUAL_SIGNTerminalRuleCall_1; }

		//destination=Concept
		public Assignment getDestinationAssignment_2() { return cDestinationAssignment_2; }

		//Concept
		public RuleCall getDestinationConceptParserRuleCall_2_0() { return cDestinationConceptParserRuleCall_2_0; }
	}

	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Concept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final RuleCall cPIPETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cTermAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTermTERMTerminalRuleCall_3_0 = (RuleCall)cTermAssignment_3.eContents().get(0);
		private final RuleCall cPIPETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cWSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Concept:
		//
		//	id=ID PIPE WS* term=TERM PIPE WS*;
		public ParserRule getRule() { return rule; }

		//id=ID PIPE WS* term=TERM PIPE WS*
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_1() { return cPIPETerminalRuleCall_1; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//term=TERM
		public Assignment getTermAssignment_3() { return cTermAssignment_3; }

		//TERM
		public RuleCall getTermTERMTerminalRuleCall_3_0() { return cTermTERMTerminalRuleCall_3_0; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_4() { return cPIPETerminalRuleCall_4; }

		//WS*
		public RuleCall getWSTerminalRuleCall_5() { return cWSTerminalRuleCall_5; }
	}
	
	
	private ExpressionElements pExpression;
	private IsaRelationshipsElements pIsaRelationships;
	private RelationshipGroupElements pRelationshipGroup;
	private RelationshipsElements pRelationships;
	private RelationshipElements pRelationship;
	private ConceptElements pConcept;
	private TerminalRule tID;
	private TerminalRule tTERM;
	private TerminalRule tWS;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tPIPE;
	private TerminalRule tCOLON;
	private TerminalRule tOPENING_CURLY_BRACKET;
	private TerminalRule tCLOSING_CURLY_BRACKET;
	private TerminalRule tEQUAL_SIGN;
	private TerminalRule tCOMMA;
	private TerminalRule tPLUS_SIGN;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public VisualizationDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("snomed.visualization.dsl.VisualizationDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Expression hidden(WS, SL_COMMENT, ML_COMMENT):
	//
	//	isaRelationships=IsaRelationships (COLON ungroupedRelationships=Relationships*
	//
	//	groupedRelationships+=RelationshipGroup*)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//IsaRelationships:
	//
	//	relationships+=Concept (PLUS_SIGN relationships+=Concept)*;
	public IsaRelationshipsElements getIsaRelationshipsAccess() {
		return (pIsaRelationships != null) ? pIsaRelationships : (pIsaRelationships = new IsaRelationshipsElements());
	}
	
	public ParserRule getIsaRelationshipsRule() {
		return getIsaRelationshipsAccess().getRule();
	}

	//RelationshipGroup:
	//
	//	OPENING_CURLY_BRACKET relationships+=Relationship (COMMA relationships+=Relationship)* CLOSING_CURLY_BRACKET;
	public RelationshipGroupElements getRelationshipGroupAccess() {
		return (pRelationshipGroup != null) ? pRelationshipGroup : (pRelationshipGroup = new RelationshipGroupElements());
	}
	
	public ParserRule getRelationshipGroupRule() {
		return getRelationshipGroupAccess().getRule();
	}

	//Relationships:
	//
	//	relationships+=Relationship (COMMA relationships+=Relationship)*;
	public RelationshipsElements getRelationshipsAccess() {
		return (pRelationships != null) ? pRelationships : (pRelationships = new RelationshipsElements());
	}
	
	public ParserRule getRelationshipsRule() {
		return getRelationshipsAccess().getRule();
	}

	//Relationship:
	//
	//	type=Concept EQUAL_SIGN destination=Concept;
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//Concept:
	//
	//	id=ID PIPE WS* term=TERM PIPE WS*;
	public ConceptElements getConceptAccess() {
		return (pConcept != null) ? pConcept : (pConcept = new ConceptElements());
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}

	//terminal ID:
	//
	//	"1".."9" "0".."9"*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal TERM:
	//
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | " ")*;
	public TerminalRule getTERMRule() {
		return (tTERM != null) ? tTERM : (tTERM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TERM"));
	} 

	//terminal WS:
	//
	//	" " | "\t" | "\n" | "\r";
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal PIPE:
	//
	//	"|";
	public TerminalRule getPIPERule() {
		return (tPIPE != null) ? tPIPE : (tPIPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PIPE"));
	} 

	//terminal COLON:
	//
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal OPENING_CURLY_BRACKET:
	//
	//	"{";
	public TerminalRule getOPENING_CURLY_BRACKETRule() {
		return (tOPENING_CURLY_BRACKET != null) ? tOPENING_CURLY_BRACKET : (tOPENING_CURLY_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPENING_CURLY_BRACKET"));
	} 

	//terminal CLOSING_CURLY_BRACKET:
	//
	//	"}";
	public TerminalRule getCLOSING_CURLY_BRACKETRule() {
		return (tCLOSING_CURLY_BRACKET != null) ? tCLOSING_CURLY_BRACKET : (tCLOSING_CURLY_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CLOSING_CURLY_BRACKET"));
	} 

	//terminal EQUAL_SIGN:
	//
	//	"=";
	public TerminalRule getEQUAL_SIGNRule() {
		return (tEQUAL_SIGN != null) ? tEQUAL_SIGN : (tEQUAL_SIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUAL_SIGN"));
	} 

	//terminal COMMA:
	//
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal PLUS_SIGN:
	//
	//	"+";
	public TerminalRule getPLUS_SIGNRule() {
		return (tPLUS_SIGN != null) ? tPLUS_SIGN : (tPLUS_SIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS_SIGN"));
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
