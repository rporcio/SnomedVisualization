/*
* generated by Xtext
*/
package snomed.visualization.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VisualizationDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Model:
		//
		//	expression=Expression;
		public ParserRule getRule() { return rule; }

		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsaRelationshipsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIsaRelationshipsIsaRelationshipsParserRuleCall_0_0 = (RuleCall)cIsaRelationshipsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStandaloneRelationshipsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStandaloneRelationshipsRelationshipsParserRuleCall_1_1_0 = (RuleCall)cStandaloneRelationshipsAssignment_1_1.eContents().get(0);
		private final Assignment cRelationshipGroupsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRelationshipGroupsRelationshipGroupParserRuleCall_1_2_0 = (RuleCall)cRelationshipGroupsAssignment_1_2.eContents().get(0);
		
		//Expression:
		//
		//	isaRelationships=IsaRelationships (":" standaloneRelationships=Relationships*
		//
		//	relationshipGroups+=RelationshipGroup*)?;
		public ParserRule getRule() { return rule; }

		//isaRelationships=IsaRelationships (":" standaloneRelationships=Relationships* relationshipGroups+=RelationshipGroup*)?
		public Group getGroup() { return cGroup; }

		//isaRelationships=IsaRelationships
		public Assignment getIsaRelationshipsAssignment_0() { return cIsaRelationshipsAssignment_0; }

		//IsaRelationships
		public RuleCall getIsaRelationshipsIsaRelationshipsParserRuleCall_0_0() { return cIsaRelationshipsIsaRelationshipsParserRuleCall_0_0; }

		//(":" standaloneRelationships=Relationships* relationshipGroups+=RelationshipGroup*)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//standaloneRelationships=Relationships*
		public Assignment getStandaloneRelationshipsAssignment_1_1() { return cStandaloneRelationshipsAssignment_1_1; }

		//Relationships
		public RuleCall getStandaloneRelationshipsRelationshipsParserRuleCall_1_1_0() { return cStandaloneRelationshipsRelationshipsParserRuleCall_1_1_0; }

		//relationshipGroups+=RelationshipGroup*
		public Assignment getRelationshipGroupsAssignment_1_2() { return cRelationshipGroupsAssignment_1_2; }

		//RelationshipGroup
		public RuleCall getRelationshipGroupsRelationshipGroupParserRuleCall_1_2_0() { return cRelationshipGroupsRelationshipGroupParserRuleCall_1_2_0; }
	}

	public class IsaRelationshipsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsaRelationships");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationshipsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationshipsConceptParserRuleCall_0_0 = (RuleCall)cRelationshipsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRelationshipsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelationshipsConceptParserRuleCall_1_1_0 = (RuleCall)cRelationshipsAssignment_1_1.eContents().get(0);
		
		//IsaRelationships:
		//
		//	relationships+=Concept ("+" relationships+=Concept)*;
		public ParserRule getRule() { return rule; }

		//relationships+=Concept ("+" relationships+=Concept)*
		public Group getGroup() { return cGroup; }

		//relationships+=Concept
		public Assignment getRelationshipsAssignment_0() { return cRelationshipsAssignment_0; }

		//Concept
		public RuleCall getRelationshipsConceptParserRuleCall_0_0() { return cRelationshipsConceptParserRuleCall_0_0; }

		//("+" relationships+=Concept)*
		public Group getGroup_1() { return cGroup_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//relationships+=Concept
		public Assignment getRelationshipsAssignment_1_1() { return cRelationshipsAssignment_1_1; }

		//Concept
		public RuleCall getRelationshipsConceptParserRuleCall_1_1_0() { return cRelationshipsConceptParserRuleCall_1_1_0; }
	}

	public class RelationshipGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRelationshipsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_1_0 = (RuleCall)cRelationshipsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRelationshipsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_2_1_0 = (RuleCall)cRelationshipsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RelationshipGroup:
		//
		//	"{" relationships+=Relationship ("," relationships+=Relationship)* "}";
		public ParserRule getRule() { return rule; }

		//"{" relationships+=Relationship ("," relationships+=Relationship)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_1() { return cRelationshipsAssignment_1; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_1_0() { return cRelationshipsRelationshipParserRuleCall_1_0; }

		//("," relationships+=Relationship)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_2_1() { return cRelationshipsAssignment_2_1; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_2_1_0() { return cRelationshipsRelationshipParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RelationshipsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationships");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationshipsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_0_0 = (RuleCall)cRelationshipsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRelationshipsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_1_1_0 = (RuleCall)cRelationshipsAssignment_1_1.eContents().get(0);
		
		//Relationships:
		//
		//	relationships+=Relationship ("," relationships+=Relationship)*;
		public ParserRule getRule() { return rule; }

		//relationships+=Relationship ("," relationships+=Relationship)*
		public Group getGroup() { return cGroup; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_0() { return cRelationshipsAssignment_0; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_0_0() { return cRelationshipsRelationshipParserRuleCall_0_0; }

		//("," relationships+=Relationship)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_1_1() { return cRelationshipsAssignment_1_1; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_1_1_0() { return cRelationshipsRelationshipParserRuleCall_1_1_0; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeConceptParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestinationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestinationConceptParserRuleCall_2_0 = (RuleCall)cDestinationAssignment_2.eContents().get(0);
		
		//Relationship:
		//
		//	type=Concept "=" destination=Concept;
		public ParserRule getRule() { return rule; }

		//type=Concept "=" destination=Concept
		public Group getGroup() { return cGroup; }

		//type=Concept
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Concept
		public RuleCall getTypeConceptParserRuleCall_0_0() { return cTypeConceptParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//destination=Concept
		public Assignment getDestinationAssignment_2() { return cDestinationAssignment_2; }

		//Concept
		public RuleCall getDestinationConceptParserRuleCall_2_0() { return cDestinationConceptParserRuleCall_2_0; }
	}

	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Concept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermTERMTerminalRuleCall_2_0 = (RuleCall)cTermAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Concept:
		//
		//	id=ID "|" term=TERM "|";
		public ParserRule getRule() { return rule; }

		//id=ID "|" term=TERM "|"
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }

		//term=TERM
		public Assignment getTermAssignment_2() { return cTermAssignment_2; }

		//TERM
		public RuleCall getTermTERMTerminalRuleCall_2_0() { return cTermTERMTerminalRuleCall_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
	}
	
	
	private ModelElements pModel;
	private ExpressionElements pExpression;
	private IsaRelationshipsElements pIsaRelationships;
	private RelationshipGroupElements pRelationshipGroup;
	private RelationshipsElements pRelationships;
	private RelationshipElements pRelationship;
	private ConceptElements pConcept;
	private TerminalRule tID;
	private TerminalRule tTERM;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public VisualizationDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("snomed.visualization.dsl.VisualizationDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	expression=Expression;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Expression:
	//
	//	isaRelationships=IsaRelationships (":" standaloneRelationships=Relationships*
	//
	//	relationshipGroups+=RelationshipGroup*)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//IsaRelationships:
	//
	//	relationships+=Concept ("+" relationships+=Concept)*;
	public IsaRelationshipsElements getIsaRelationshipsAccess() {
		return (pIsaRelationships != null) ? pIsaRelationships : (pIsaRelationships = new IsaRelationshipsElements());
	}
	
	public ParserRule getIsaRelationshipsRule() {
		return getIsaRelationshipsAccess().getRule();
	}

	//RelationshipGroup:
	//
	//	"{" relationships+=Relationship ("," relationships+=Relationship)* "}";
	public RelationshipGroupElements getRelationshipGroupAccess() {
		return (pRelationshipGroup != null) ? pRelationshipGroup : (pRelationshipGroup = new RelationshipGroupElements());
	}
	
	public ParserRule getRelationshipGroupRule() {
		return getRelationshipGroupAccess().getRule();
	}

	//Relationships:
	//
	//	relationships+=Relationship ("," relationships+=Relationship)*;
	public RelationshipsElements getRelationshipsAccess() {
		return (pRelationships != null) ? pRelationships : (pRelationships = new RelationshipsElements());
	}
	
	public ParserRule getRelationshipsRule() {
		return getRelationshipsAccess().getRule();
	}

	//Relationship:
	//
	//	type=Concept "=" destination=Concept;
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//Concept:
	//
	//	id=ID "|" term=TERM "|";
	public ConceptElements getConceptAccess() {
		return (pConcept != null) ? pConcept : (pConcept = new ConceptElements());
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}

	//terminal ID:
	//
	//	"1".."9" "0".."9"*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal TERM:
	//
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | " ")*;
	public TerminalRule getTERMRule() {
		return (tTERM != null) ? tTERM : (tTERM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TERM"));
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
