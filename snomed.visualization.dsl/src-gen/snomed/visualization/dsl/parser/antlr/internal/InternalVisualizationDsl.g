/*
* generated by Xtext
*/
grammar InternalVisualizationDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package snomed.visualization.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package snomed.visualization.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import snomed.visualization.dsl.services.VisualizationDslGrammarAccess;

}

@parser::members {

 	private VisualizationDslGrammarAccess grammarAccess;
 	
    public InternalVisualizationDslParser(TokenStream input, VisualizationDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Expression";	
   	}
   	
   	@Override
   	protected VisualizationDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getIsaRelationshipsIsaRelationshipsParserRuleCall_0_0()); 
	    }
		lv_isaRelationships_0_0=ruleIsaRelationships		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"isaRelationships",
        		lv_isaRelationships_0_0, 
        		"IsaRelationships");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COLON_1=RULE_COLON
    { 
    newLeafNode(this_COLON_1, grammarAccess.getExpressionAccess().getCOLONTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getUngroupedRelationshipsRelationshipsParserRuleCall_1_1_0()); 
	    }
		lv_ungroupedRelationships_2_0=ruleRelationships		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"ungroupedRelationships",
        		lv_ungroupedRelationships_2_0, 
        		"Relationships");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getGroupedRelationshipsRelationshipGroupParserRuleCall_1_2_0()); 
	    }
		lv_groupedRelationships_3_0=ruleRelationshipGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"groupedRelationships",
        		lv_groupedRelationships_3_0, 
        		"RelationshipGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleIsaRelationships
entryRuleIsaRelationships returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsaRelationshipsRule()); }
	 iv_ruleIsaRelationships=ruleIsaRelationships 
	 { $current=$iv_ruleIsaRelationships.current; } 
	 EOF 
;

// Rule IsaRelationships
ruleIsaRelationships returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIsaRelationshipsAccess().getRelationshipsConceptParserRuleCall_0_0()); 
	    }
		lv_relationships_0_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIsaRelationshipsRule());
	        }
       		add(
       			$current, 
       			"relationships",
        		lv_relationships_0_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PLUS_SIGN_1=RULE_PLUS_SIGN
    { 
    newLeafNode(this_PLUS_SIGN_1, grammarAccess.getIsaRelationshipsAccess().getPLUS_SIGNTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIsaRelationshipsAccess().getRelationshipsConceptParserRuleCall_1_1_0()); 
	    }
		lv_relationships_2_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIsaRelationshipsRule());
	        }
       		add(
       			$current, 
       			"relationships",
        		lv_relationships_2_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationshipGroup
entryRuleRelationshipGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationshipGroupRule()); }
	 iv_ruleRelationshipGroup=ruleRelationshipGroup 
	 { $current=$iv_ruleRelationshipGroup.current; } 
	 EOF 
;

// Rule RelationshipGroup
ruleRelationshipGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_OPENING_CURLY_BRACKET_0=RULE_OPENING_CURLY_BRACKET
    { 
    newLeafNode(this_OPENING_CURLY_BRACKET_0, grammarAccess.getRelationshipGroupAccess().getOPENING_CURLY_BRACKETTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipGroupAccess().getRelationshipsRelationshipParserRuleCall_1_0()); 
	    }
		lv_relationships_1_0=ruleRelationship		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipGroupRule());
	        }
       		add(
       			$current, 
       			"relationships",
        		lv_relationships_1_0, 
        		"Relationship");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_2=RULE_COMMA
    { 
    newLeafNode(this_COMMA_2, grammarAccess.getRelationshipGroupAccess().getCOMMATerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipGroupAccess().getRelationshipsRelationshipParserRuleCall_2_1_0()); 
	    }
		lv_relationships_3_0=ruleRelationship		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipGroupRule());
	        }
       		add(
       			$current, 
       			"relationships",
        		lv_relationships_3_0, 
        		"Relationship");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_CLOSING_CURLY_BRACKET_4=RULE_CLOSING_CURLY_BRACKET
    { 
    newLeafNode(this_CLOSING_CURLY_BRACKET_4, grammarAccess.getRelationshipGroupAccess().getCLOSING_CURLY_BRACKETTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleRelationships
entryRuleRelationships returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationshipsRule()); }
	 iv_ruleRelationships=ruleRelationships 
	 { $current=$iv_ruleRelationships.current; } 
	 EOF 
;

// Rule Relationships
ruleRelationships returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipsAccess().getRelationshipsRelationshipParserRuleCall_0_0()); 
	    }
		lv_relationships_0_0=ruleRelationship		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipsRule());
	        }
       		add(
       			$current, 
       			"relationships",
        		lv_relationships_0_0, 
        		"Relationship");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getRelationshipsAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipsAccess().getRelationshipsRelationshipParserRuleCall_1_1_0()); 
	    }
		lv_relationships_2_0=ruleRelationship		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipsRule());
	        }
       		add(
       			$current, 
       			"relationships",
        		lv_relationships_2_0, 
        		"Relationship");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationship
entryRuleRelationship returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationshipRule()); }
	 iv_ruleRelationship=ruleRelationship 
	 { $current=$iv_ruleRelationship.current; } 
	 EOF 
;

// Rule Relationship
ruleRelationship returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getTypeConceptParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EQUAL_SIGN_1=RULE_EQUAL_SIGN
    { 
    newLeafNode(this_EQUAL_SIGN_1, grammarAccess.getRelationshipAccess().getEQUAL_SIGNTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getDestinationConceptParserRuleCall_2_0()); 
	    }
		lv_destination_2_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipRule());
	        }
       		set(
       			$current, 
       			"destination",
        		lv_destination_2_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConcept
entryRuleConcept returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConceptRule()); }
	 iv_ruleConcept=ruleConcept 
	 { $current=$iv_ruleConcept.current; } 
	 EOF 
;

// Rule Concept
ruleConcept returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getConceptAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConceptRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)this_PIPE_1=RULE_PIPE
    { 
    newLeafNode(this_PIPE_1, grammarAccess.getConceptAccess().getPIPETerminalRuleCall_1()); 
    }
(this_WS_2=RULE_WS
    { 
    newLeafNode(this_WS_2, grammarAccess.getConceptAccess().getWSTerminalRuleCall_2()); 
    }
)*(
(
		lv_term_3_0=RULE_TERM
		{
			newLeafNode(lv_term_3_0, grammarAccess.getConceptAccess().getTermTERMTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConceptRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"term",
        		lv_term_3_0, 
        		"TERM");
	    }

)
)this_PIPE_4=RULE_PIPE
    { 
    newLeafNode(this_PIPE_4, grammarAccess.getConceptAccess().getPIPETerminalRuleCall_4()); 
    }
(this_WS_5=RULE_WS
    { 
    newLeafNode(this_WS_5, grammarAccess.getConceptAccess().getWSTerminalRuleCall_5()); 
    }
)*)
;





RULE_ID : '1'..'9' ('0'..'9')*;

RULE_TERM : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|' ')*;

RULE_WS : (' '|'\t'|'\n'|'\r');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_PIPE : '|';

RULE_COLON : ':';

RULE_OPENING_CURLY_BRACKET : '{';

RULE_CLOSING_CURLY_BRACKET : '}';

RULE_EQUAL_SIGN : '=';

RULE_COMMA : ',';

RULE_PLUS_SIGN : '+';

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ANY_OTHER : .;


